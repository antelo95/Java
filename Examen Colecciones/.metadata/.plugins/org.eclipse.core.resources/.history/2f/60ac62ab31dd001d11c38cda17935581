package e2;

import java.time.LocalDate;

public class App {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		Ejercicio 2. Diseña una aplicación Java que sirva para gestionar una colección de personas. De cada persona se guardará id, nombre, apellidos y fecha de nacimiento (java.time.LocalDate). 
//
//		Esta gestión implica diseñar los métodos siguientes:
//		añadir una persona a la colección.
//		añadir varias personas. Las personas serán pasadas en un array.
//		retornar las personas que nacieron en un año concreto. El año deberá ser pasado como parámetro. 
//		retornar las personas que nacieron entre dos fechas pasadas como parámetros. Los datos retornados deben estar  ordenados de forma ascendente por fecha.
//		eliminar las personas cuyos apellidos contengan un patrón pasado como parámetro. Retornar el número de personas que se han eliminado.
//
//		Ten en cuenta que dos personas se consideran iguales si tienen el mismo valor de id.
//		Prueba la clase GestionPersonas, llamando a cada uno de sus métodos.
		
		GestionPersonas g = new GestionPersonas();
		g.addPersona(new Persona("1", "Pepe", "Sanchez", LocalDate.of(1963, 10, 22)));
		g.addPersona(new Persona("2", "Lola", "Leon", LocalDate.of(1969, 1, 2)));
		g.addPersona(new Persona("3", "Juan", "Mata", LocalDate.of(2001, 11, 12)));
		g.addPersona(new Persona("4", "Agustin", "Silva", LocalDate.of(1980, 3, 8)));
		g.addPersona(new Persona("4", "Agustin", "Silva", LocalDate.of(1980, 3, 8)));
		//g.mostrar();
		Persona [] personas = {
				new Persona("7", "Manolo", "Galvan", LocalDate.of(2003, 3, 2)),
				new Persona("6", "Manolito", "Sanchis", LocalDate.of(2008, 11, 21))
		};
		g.addVariasPersonas(personas);
		g.mostrar();
	}

}
